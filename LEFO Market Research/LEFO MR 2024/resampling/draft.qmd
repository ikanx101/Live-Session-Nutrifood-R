---
title: "Resampling dengan Prinsip Simulasi Monte Carlo"
subtitle: "Sebuah Learning Forum"
author: ikanx101.com
institute: Market Research Dept. Nutrifood
format: 
  revealjs:
    theme: night
    logo: logo.png
    css: logo.css
    slide-number: true
    footer: Sebuah Learning Forum
    incremental: true
    show-slide-number: all
    transition: convex
    width: 1280
    height: 720
    highlight-style: arrow-dark
    toc: true
    toc-title: Agenda Kita Hari Ini
    toc-depth: 1
    output-location: column
    code-overflow: scroll
editor: visual
execute: 
  echo: true
  warning: false
---

```{r}
#| include: false

setwd("~/Live-Session-Nutrifood-R/LEFO Market Research/LEFO MR 2024/resampling")

library(readxl)
library(dplyr)
library(tidyr)
library(parallel)
library(janitor)
library(ggplot2)
library(gganimate)

n_core = detectCores()

df_survey = read_excel("hasil survey.xlsx")
```

# INTRO {.center}

## Masalah {.center}

Target market berbeda-beda dalam beberapa tahun silam.

Ada kebutuhan pada __BSC__ untuk menampilkan data _tracking_ dengan target responden yang sama.

## Prinsip {.center}

Kita bisa memanfaatkan prinsip pada simulasi Monte Carlo untuk melakukan _resampling with large number of experiments_. Memanfaatkan _law of large number_, hasil yang didapatkan sangat _robust_ secara statistik.


## _Flow_ {.center .smaller}

- input:
    - real data
- define:
    - kategori resampling. misal: by ses, usia, kota, dll
    - proporsi resampling dan number of simulation
- process:
    - split real data into multiple data sets
    - for iter to number of simulation do:
        - pick random rows from multiple data sets based on proporsi resampling
        - merge into single dataset
        - create and save tabulation
    - hasil dari keseluruhan iterasi akan dihitung persebarannya dan nilai _expected_-nya (_mean_).

## Catatan {.center}

Jika direnungi, _flow_ pengerjaannya cukup sederhana. Namun __bisa jadi__ pengerjaannya akan memakan waktu lama secara _processing_ / komputasi jika menggunakan `number of simulation` yang __besar dan dilakukan dengan__ ___looping___.

> Oleh karena itu, saya akan memanfaatkan layanan __Google Colab__ agar kita bisa menggunakan prinsip _parallel computing_!

Karena _parallel computing_ di __R__ tidak bisa dijalankan oleh komputer _Windows OS_.


# DATA YANG DIGUNAKAN

## Deskripsi Data {.center .smaller}

Saya telah membuat data sintetis sederhana yang memuat informasi sebagai berikut:

1. Tempat riset,
1. _Gender_,
1. Kelompok usia,
1. SES,
1. TOM,
1. _Aided awareness_,
1. _Trial_,
1. _Repeat_,
1. _Last Usage_, dan
1. _Future intention_.

## Sampel Data {.center .smaller}

```{r}
#| echo: false
df_survey %>% 
  head(10) %>% 
  knitr::kable(align = "c") %>% 
  kableExtra::kable_styling(font_size = 16) 
```

## Tabulasi Profil {.center}

```{r}
df_survey %>% 
  tabyl(ses) %>% 
  adorn_pct_formatting(digits = 1)
```


```{r}
df_survey %>% 
  tabyl(usia) %>% 
  adorn_pct_formatting(digits = 1)
```


```{r}
df_survey %>% 
  tabyl(gender) %>% 
  adorn_pct_formatting(digits = 1)
```


## Tabulasi Komponen TBI {.center}

```{r}
df_survey |> 
  tabyl(tom) |> 
  adorn_pct_formatting(digits = 1)
```

```{r}
df_survey |> 
  tabyl(last) |> 
  adorn_pct_formatting(digits = 1)
```

```{r}
df_survey |> 
  tabyl(futur) |> 
  adorn_pct_formatting(digits = 1)
```


# MASALAH

## _Rules Resampling_ {.center .smaller}

Dari data di atas, kita dapatkan bahwa proposi SES adalah `50-50`. Ada kebutuhan agar dilakukan _resampling_ dengan aturan:

1. Hanya lokasi `a`,`c`,`d`, dan `f` yang bisa diikut sertakan.
1. Proporsi SES menjadi `upper : middle` sebesar `30 : 70`.


# _HOW TO_

## __R__ _Libraries_ yang Digunakan {.center}

__R__ _libraries_ yang digunakan pada _lefo_ kali ini adalah _libraries_ yang memang sudah biasa digunakan sehari-hari, yakni:

1. `dplyr`, `tidyr`, dan `data.table` untuk _data carpentry_.
1. `janitor` untuk membuat tabulasi data.
1. `parallel` untuk _parallel computing_.
1. `ggplot2` untuk membuat visualisasi data.

## Skrip I {.center}

```{r}
# kita filter terlebih dahulu lokasi yang diperlukan
df_filtered =
  df_survey |>
  filter(lokasi %in% c("a","c","d","f"))

# lalu kita lihat proporsi ses yang terjadi
df_filtered |> 
  tabyl(ses) |> 
  adorn_pct_formatting(digits = 2)
```

## Catatan {.center}

Oleh karena banyaknya baris antara _middle_ dan _upper_ mencukupi, maka kita bisa melakukan _resampling_ dengan jumlah baris yang besar.

Pada kasus ini, kita akan buat $n$ _resampling_ sebesar __100 baris data__ dengan `30` baris data diambil dari ses _upper_ dan `70` baris data diambil dari ses _middle_.

_Nah_, proses _resampling_ ini akan dilakukan berulang-ulang kali sebanyak-banyaknya sesuai dengan prinsip Monte Carlo.

## Skrip II {.center}

```{r}
# TAHAP 1
# kita bagi dua datanya
df_upper = 
  df_filtered |> 
  filter(ses == "upper")

df_mid   = 
  df_filtered |> 
  filter(ses != "upper")

# TAHAP 2
n_up  = 30
n_mid = 70
```

```{r}
#| include: false
# TAHAP 3
# kita bikin function resampling
resampling_donk = function(dummy){
  # kita resampling
  df_up_  = df_upper[sample(nrow(df_upper), n_up, replace = F), ]
  df_mid_ = df_mid[sample(nrow(df_mid), n_mid, replace = F), ]
  # gabung
  df_temp = rbind(df_up_, df_mid_)
  # bikin tabulasi
  tom_resampling   = df_temp |> tabyl(tom) |> filter(tom == "ya") |> pull(percent)
  lu_resampling    = df_temp |> tabyl(last) |> filter(last == "ya") |> pull(percent)
  fi_resampling    = df_temp |> tabyl(futur) |> filter(futur == "ya") |> pull(percent)
  aided_resampling = df_temp |> tabyl(aided) |> filter(aided == "ya") |> pull(percent)
  trial_resampling = df_temp |> tabyl(trial) |> filter(trial == "ya") |> pull(percent)
  repea_resampling = df_temp |> tabyl(repe) |> filter(repe == "ya") |> pull(percent)
  # buat output
  output = data.frame(
    tom_resampling,
    lu_resampling,
    fi_resampling,
    aided_resampling,
    trial_resampling,
    repea_resampling
  )
  return(output)
}
```

## Skrip III {.center}

```
# TAHAP 3
# kita bikin function resampling
resampling_donk = function(dummy){
  # kita resampling
  df_up_  = df_upper[sample(nrow(df_upper), n_up, replace = F), ]
  df_mid_ = df_mid[sample(nrow(df_mid), n_mid, replace = F), ]
  # gabung
  df_temp = rbind(df_up_, df_mid_)
  # bikin tabulasi
  tom_resampling   = df_temp |> tabyl(tom) |> filter(tom == "ya") |> pull(percent)
  lu_resampling    = df_temp |> tabyl(last) |> filter(last == "ya") |> pull(percent)
  fi_resampling    = df_temp |> tabyl(futur) |> filter(futur == "ya") |> pull(percent)
  aided_resampling = df_temp |> tabyl(aided) |> filter(aided == "ya") |> pull(percent)
  trial_resampling = df_temp |> tabyl(trial) |> filter(trial == "ya") |> pull(percent)
  repea_resampling = df_temp |> tabyl(repe) |> filter(repe == "ya") |> pull(percent)
  # buat output
  output = data.frame(
    tom_resampling,
    lu_resampling,
    fi_resampling,
    aided_resampling,
    trial_resampling,
    repea_resampling
  )
  return(output)
}
```

## Skrip IV {.center}

```{r}
# TAHAP 4
# berapa kali proses resampling?
n_resamp    = 1000
temp_resamp = mclapply(1:n_resamp,resampling_donk,mc.cores = n_core)
df_final    = data.table::rbindlist(temp_resamp) %>% 
              as.data.frame()
```

## Hasil _Resampling_ {.center}

Berikut adalah sampel dari `10` kali _resampling_:

```{r}
df_final %>% 
  head(10) %>% 
  knitr::kable(align = "c") %>% 
  kableExtra::kable_styling(font_size = 16)  
```

# GRAFIK HASIL _RESAMPLING_

## Komponen TBI dan _Brand Pyramid_ {.center}

```{r}
#| echo: false

df_final$t = 1:n_resamp

df_final %>% 
  select(-t) %>% 
  colMeans() %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(nama_var = rownames(.)) %>% 
  mutate(persen = value * 100,
         persen = round(persen,1),
         label  = paste0(persen,"%")) %>% 
  ggplot(aes(x = nama_var,
             y = persen)) +
  geom_col(color = "black") +
  geom_label(aes(label = label)) +
  theme_minimal() +
  ylim(0,100) +
  theme(axis.title = element_blank(),
        axis.text.y = element_blank()) +
  labs(title = "Hasil Resampling",
       subtitle = "Sebanyak 1000 kali dengan pengambilan 100 baris data")

```

# DISKUSI

## _Critical Points_ {.center}

Poin kritis dalam melakukan _resampling_ adalah penentuan berapa banyak baris data yang hendak diambil dan berapa kali ita melakukan _resampling_.

Berikut akan saya berikan contoh simulasi dengan berbagai nilai baris data yang hendak diambil dan seberapa cepat hasilnya menuju konvergen ke suatu nilai.

## 100 Baris Data

```{r}
#| echo: false
tom_mean   = df_final %>% pull(tom_resampling) %>% mean()

plt = 
  df_final %>% 
  mutate(tom_ = cummean(tom_resampling)) %>%
  filter(t > 3) %>% 
  ggplot(aes(x = t,
             y = tom_)) +
  geom_line(aes(group = 1),color = "steelblue") +
  theme_minimal() +
  geom_hline(yintercept = tom_mean,color = "darkred") +
  ylim(0.7,0.73) +
  labs(y = "Expected TOM",
       x = "How many resampling?",
       title = "Perubahan nilai TOM saat n resampling bertambah terus",
       subtitle = "dengan pengambilan 100 baris data") +
  transition_reveal(t)
animate(plt,duration = 30)
```


## 120 Baris Data

```{r}
#| echo: false

# TAHAP 2
n_up  = 36
n_mid = 84

# TAHAP 3
# kita bikin function resampling
resampling_donk = function(dummy){
  # kita resampling
  df_up_  = df_upper[sample(nrow(df_upper), n_up, replace = F), ]
  df_mid_ = df_mid[sample(nrow(df_mid), n_mid, replace = F), ]
  # gabung
  df_temp = rbind(df_up_, df_mid_)
  # bikin tabulasi
  tom_resampling   = df_temp |> tabyl(tom) |> filter(tom == "ya") |> pull(percent)
  lu_resampling    = df_temp |> tabyl(last) |> filter(last == "ya") |> pull(percent)
  fi_resampling    = df_temp |> tabyl(futur) |> filter(futur == "ya") |> pull(percent)
  aided_resampling = df_temp |> tabyl(aided) |> filter(aided == "ya") |> pull(percent)
  trial_resampling = df_temp |> tabyl(trial) |> filter(trial == "ya") |> pull(percent)
  repea_resampling = df_temp |> tabyl(repe) |> filter(repe == "ya") |> pull(percent)
  # buat output
  output = data.frame(
    tom_resampling,
    lu_resampling,
    fi_resampling,
    aided_resampling,
    trial_resampling,
    repea_resampling
  )
  return(output)
}

# TAHAP 4
# berapa kali proses resampling?
n_resamp    = 8000
temp_resamp = mclapply(1:n_resamp,resampling_donk,mc.cores = n_core)
df_final    = data.table::rbindlist(temp_resamp) %>% as.data.frame()

df_final$t = 1:n_resamp

tom_mean   = df_final %>% pull(tom_resampling) %>% mean()

plt = 
  df_final %>% 
  mutate(tom_ = cummean(tom_resampling)) %>%
  filter(t > 3) %>% 
  ggplot(aes(x = t,
             y = tom_)) +
  geom_line(aes(group = 1),color = "steelblue") +
  theme_minimal() +
  geom_hline(yintercept = tom_mean,color = "darkred") +
  ylim(0.7,0.73) +
  labs(y = "Expected TOM",
       x = "How many resampling?",
       title = "Perubahan nilai TOM saat n resampling bertambah terus",
       subtitle = "dengan pengambilan 120 baris data") +
  transition_reveal(t)
animate(plt,duration = 40)

```


## 70 Baris Data

```{r}
#| echo: false

# TAHAP 2
n_up  = 21
n_mid = 49

# TAHAP 3
# kita bikin function resampling
resampling_donk = function(dummy){
  # kita resampling
  df_up_  = df_upper[sample(nrow(df_upper), n_up, replace = F), ]
  df_mid_ = df_mid[sample(nrow(df_mid), n_mid, replace = F), ]
  # gabung
  df_temp = rbind(df_up_, df_mid_)
  # bikin tabulasi
  tom_resampling   = df_temp |> tabyl(tom) |> filter(tom == "ya") |> pull(percent)
  lu_resampling    = df_temp |> tabyl(last) |> filter(last == "ya") |> pull(percent)
  fi_resampling    = df_temp |> tabyl(futur) |> filter(futur == "ya") |> pull(percent)
  aided_resampling = df_temp |> tabyl(aided) |> filter(aided == "ya") |> pull(percent)
  trial_resampling = df_temp |> tabyl(trial) |> filter(trial == "ya") |> pull(percent)
  repea_resampling = df_temp |> tabyl(repe) |> filter(repe == "ya") |> pull(percent)
  # buat output
  output = data.frame(
    tom_resampling,
    lu_resampling,
    fi_resampling,
    aided_resampling,
    trial_resampling,
    repea_resampling
  )
  return(output)
}

# TAHAP 4
# berapa kali proses resampling?
n_resamp    = 8000
temp_resamp = mclapply(1:n_resamp,resampling_donk,mc.cores = n_core)
df_final    = data.table::rbindlist(temp_resamp) %>% as.data.frame()

df_final$t = 1:n_resamp

tom_mean   = df_final %>% pull(tom_resampling) %>% mean()

plt = 
  df_final %>% 
  mutate(tom_ = cummean(tom_resampling)) %>%
  filter(t > 3) %>% 
  ggplot(aes(x = t,
             y = tom_)) +
  geom_line(aes(group = 1),color = "steelblue") +
  theme_minimal() +
  geom_hline(yintercept = tom_mean,color = "darkred") +
  ylim(0.7,0.73) +
  labs(y = "Expected TOM",
       x = "How many resampling?",
       title = "Perubahan nilai TOM saat n resampling bertambah terus",
       subtitle = "dengan pengambilan 70 baris data") +
  transition_reveal(t)
animate(plt,duration = 40)

```




## 50 Baris Data

```{r}
#| echo: false

# TAHAP 2
n_up  = 30/2
n_mid = 70/2

# TAHAP 3
# kita bikin function resampling
resampling_donk = function(dummy){
  # kita resampling
  df_up_  = df_upper[sample(nrow(df_upper), n_up, replace = F), ]
  df_mid_ = df_mid[sample(nrow(df_mid), n_mid, replace = F), ]
  # gabung
  df_temp = rbind(df_up_, df_mid_)
  # bikin tabulasi
  tom_resampling   = df_temp |> tabyl(tom) |> filter(tom == "ya") |> pull(percent)
  lu_resampling    = df_temp |> tabyl(last) |> filter(last == "ya") |> pull(percent)
  fi_resampling    = df_temp |> tabyl(futur) |> filter(futur == "ya") |> pull(percent)
  aided_resampling = df_temp |> tabyl(aided) |> filter(aided == "ya") |> pull(percent)
  trial_resampling = df_temp |> tabyl(trial) |> filter(trial == "ya") |> pull(percent)
  repea_resampling = df_temp |> tabyl(repe) |> filter(repe == "ya") |> pull(percent)
  # buat output
  output = data.frame(
    tom_resampling,
    lu_resampling,
    fi_resampling,
    aided_resampling,
    trial_resampling,
    repea_resampling
  )
  return(output)
}

# TAHAP 4
# berapa kali proses resampling?
n_resamp    = 8000
temp_resamp = mclapply(1:n_resamp,resampling_donk,mc.cores = n_core)
df_final    = data.table::rbindlist(temp_resamp) %>% as.data.frame()

df_final$t = 1:n_resamp

tom_mean   = df_final %>% pull(tom_resampling) %>% mean()

plt = 
  df_final %>% 
  mutate(tom_ = cummean(tom_resampling)) %>%
  filter(t > 3) %>% 
  ggplot(aes(x = t,
             y = tom_)) +
  geom_line(aes(group = 1),color = "steelblue") +
  theme_minimal() +
  geom_hline(yintercept = tom_mean,color = "darkred") +
  ylim(0.7,0.73) +
  labs(y = "Expected TOM",
       x = "How many resampling?",
       title = "Perubahan nilai TOM saat n resampling bertambah terus",
       subtitle = "dengan pengambilan 50 baris data") +
  transition_reveal(t)
animate(plt,duration = 40)

```


## 40 Baris Data

```{r}
#| echo: false

# TAHAP 2
n_up  = 12
n_mid = 28

# TAHAP 3
# kita bikin function resampling
resampling_donk = function(dummy){
  # kita resampling
  df_up_  = df_upper[sample(nrow(df_upper), n_up, replace = F), ]
  df_mid_ = df_mid[sample(nrow(df_mid), n_mid, replace = F), ]
  # gabung
  df_temp = rbind(df_up_, df_mid_)
  # bikin tabulasi
  tom_resampling   = df_temp |> tabyl(tom) |> filter(tom == "ya") |> pull(percent)
  lu_resampling    = df_temp |> tabyl(last) |> filter(last == "ya") |> pull(percent)
  fi_resampling    = df_temp |> tabyl(futur) |> filter(futur == "ya") |> pull(percent)
  aided_resampling = df_temp |> tabyl(aided) |> filter(aided == "ya") |> pull(percent)
  trial_resampling = df_temp |> tabyl(trial) |> filter(trial == "ya") |> pull(percent)
  repea_resampling = df_temp |> tabyl(repe) |> filter(repe == "ya") |> pull(percent)
  # buat output
  output = data.frame(
    tom_resampling,
    lu_resampling,
    fi_resampling,
    aided_resampling,
    trial_resampling,
    repea_resampling
  )
  return(output)
}

# TAHAP 4
# berapa kali proses resampling?
n_resamp    = 8000
temp_resamp = mclapply(1:n_resamp,resampling_donk,mc.cores = n_core)
df_final    = data.table::rbindlist(temp_resamp) %>% as.data.frame()

df_final$t = 1:n_resamp

tom_mean   = df_final %>% pull(tom_resampling) %>% mean()

plt = 
  df_final %>% 
  mutate(tom_ = cummean(tom_resampling)) %>%
  filter(t > 3) %>% 
  ggplot(aes(x = t,
             y = tom_)) +
  geom_line(aes(group = 1),color = "steelblue") +
  theme_minimal() +
  geom_hline(yintercept = tom_mean,color = "darkred") +
  ylim(0.7,0.73) +
  labs(y = "Expected TOM",
       x = "How many resampling?",
       title = "Perubahan nilai TOM saat n resampling bertambah terus",
       subtitle = "dengan pengambilan 40 baris data") +
  transition_reveal(t)
animate(plt,duration = 60)

```

## 30 Baris Data

```{r}
#| echo: false

# TAHAP 2
n_up  = 9
n_mid = 21

# TAHAP 3
# kita bikin function resampling
resampling_donk = function(dummy){
  # kita resampling
  df_up_  = df_upper[sample(nrow(df_upper), n_up, replace = F), ]
  df_mid_ = df_mid[sample(nrow(df_mid), n_mid, replace = F), ]
  # gabung
  df_temp = rbind(df_up_, df_mid_)
  # bikin tabulasi
  tom_resampling   = df_temp |> tabyl(tom) |> filter(tom == "ya") |> pull(percent)
  lu_resampling    = df_temp |> tabyl(last) |> filter(last == "ya") |> pull(percent)
  fi_resampling    = df_temp |> tabyl(futur) |> filter(futur == "ya") |> pull(percent)
  aided_resampling = df_temp |> tabyl(aided) |> filter(aided == "ya") |> pull(percent)
  trial_resampling = df_temp |> tabyl(trial) |> filter(trial == "ya") |> pull(percent)
  repea_resampling = df_temp |> tabyl(repe) |> filter(repe == "ya") |> pull(percent)
  # buat output
  output = data.frame(
    tom_resampling,
    lu_resampling,
    fi_resampling,
    aided_resampling,
    trial_resampling,
    repea_resampling
  )
  return(output)
}

# TAHAP 4
# berapa kali proses resampling?
n_resamp    = 8000
temp_resamp = mclapply(1:n_resamp,resampling_donk,mc.cores = n_core)
df_final    = data.table::rbindlist(temp_resamp) %>% as.data.frame()

df_final$t = 1:n_resamp

tom_mean   = df_final %>% pull(tom_resampling) %>% mean()

plt = 
  df_final %>% 
  mutate(tom_ = cummean(tom_resampling)) %>%
  filter(t > 3) %>% 
  ggplot(aes(x = t,
             y = tom_)) +
  geom_line(aes(group = 1),color = "steelblue") +
  theme_minimal() +
  geom_hline(yintercept = tom_mean,color = "darkred") +
  ylim(0.7,0.73) +
  labs(y = "Expected TOM",
       x = "How many resampling?",
       title = "Perubahan nilai TOM saat n resampling bertambah terus",
       subtitle = "dengan pengambilan 30 baris data") +
  transition_reveal(t)
animate(plt,duration = 60)

```






# _HANDS ON_ {.center}

_Yuk mari kita kemon cobain_