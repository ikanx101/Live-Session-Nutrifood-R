---
title: "Adu Cepat"
subtitle: "dplyr, dtplyr, dan tidypolars"
author: ikanx101.com
institute: Market Research Dept.
format: 
  revealjs:
    theme: blood
    logo: logo.png
    css: logo.css
    slide-number: true
    footer: Sebuah Learning Forum Data Science
    incremental: true
    show-slide-number: all
    transition: convex
    width: 1280
    height: 720
    highlight-style: arrow-dark
    toc: true
    toc-title: Agenda Kita Hari Ini
    toc-depth: 1
    output-location: column
    code-overflow: scroll
editor: visual
execute: 
  echo: true
  warning: false
---

```{r,include=FALSE}
# https://quarto.org/docs/reference/formats/presentations/revealjs.html

setwd("~/Live-Session-Nutrifood-R/LEFO Market Research/LEFO MR 2024/dplyr dtplyr tidypolars")

rm(list=ls())
library(dplyr)
library(dtplyr)
library(tidypolars)
```

# LATAR BELAKANG

## Masalah {.center}

-   Makin besar datanya, makin lama prosesnya!
-   Apalagi kalau *dataset*-nya banyak.
    -   Diambil dari *multiple excel files*.
-   Apalagi kalau pake *Windows*. *Hehe*

## *Coding Style* di **R** {.center}

Setidaknya ada dua *coding style* di **R**, yakni:

1.  Prinsip `tidy` dengan operator *pipe*: `%>%`.
2.  Prinsip `data.table` dengan fungsi yang berlapis.

## *Advantages and Disadvantages* {.center}

Selain berbeda cara *ngoding*, ternyata masing-masing *coding styles* punya kelebihan dan kelemahan.

```{r,echo=FALSE}
data.frame(coding = c("tidy","data.table"),
           adv = c("Mudah menuliskannya. Mudah di-track. Super intuitif.",
                   "Runtime cepat"),
           dis_adv = c("Konon lebih lama runtimenya.","Susah menuliskannya.")) %>% 
  knitr::kable()
```

## *Another Framework* {.center}

Seiring dengan perkembangan zaman, muncul beberapa *framework* terkait *data manipulation* baik di **R** atau bahkan bahasa pemrograman lain.

Salah satunya adalah [Polars](https://pola.rs/about-us/).

```{r}
#| echo: false
knitr::include_graphics("Polars_.png")
```

# *RUNTIME* LAMBAT PADA BIG DATA

## Lambannya Proses {.center}

Pengguna `tidy` mengeluhkan lambatnya proses pengolahan data pada *big data*. Jika kita perhatikan dengan seksama, konsumsi **RAM** juga semakin membesar.

-   Pertanyaannya:
    -   Ada yang tahu cara melihat konsumsi *memory* di **R Studio**?

## Konsumsi *Memory* {.center}

::: {#fig-elephants layout-ncol="2"}
![Memory Usage Report](Screenshot%20from%202024-01-22%2014-55-52.png){#fig-surus}

![Memory Usage](Screenshot%20from%202024-01-22%2014-56-08.png){#fig-hanno}

Cara Melihat Konsumsi *Memory* di **R Studio**.
:::

## Solusi {.center}

Kita bisa mempercepat *runtime* proses *data manipulation* dengan cara:

-   Memperbesar RAM komputer (alias *request* kepada tim ITA).
    -   Ada yang mau *share* pengalaman atau tips dan trik agar bisa **diloloskan**?
    -   *Be King of Beggar*. *Hehe*.
-   Memperkecil *memory usage* dengan mengubah cara *ngoding*.
-   Melakukan komputasi paralel.
    -   Masalahnya tidak semua bisa diaplikasikan secara paralel.

# PERBANDINGAN *LIBRARIES DATA MANIPULATION*

## *Remarks* {.center}

> Perlu diingat bahwa mengganti *coding style* bisa menimbulkan kerumitan tersendiri.

-   Jadi perlu dipikirkan cara agar kita tetap menggunakan prinsip *tidy* tapi bisa mengakomodir kebutuhan *runtime* yang lebih cepat.

## *Libraries*

Kali ini kita akan membandingkan performa dari tiga *libraries* terkait *data manipulation* tapi tetap menggunakan prinsip *tidy*, yakni:

1.  `dplyr` : *library* favorit kita semua.
2.  `dtplyr` : *library* konektor pengubah `data.table` menjadi *object* `dplyr`
3.  `tidypolar`: *library* konektor pengubah *polars* menjadi *object* `dplyr`.

-   Kita akan melihat konsumsi *memory* dan *runtime* dalam mengolah data jutaan baris.

## Data Sintetis

Berikut adalah skrip yang digunakan untuk *generate random data*:

```{r}
n_generate = 10^7
df_input <- data.frame(
  grup = sample(LETTERS[1:6], 
                n_generate, 
                replace = TRUE),
  nilai = rnorm(n_generate)
)
df_input |> head(10)
```

Ada dua kolom pada data tersebut, yakni: `grup` berisi **enam** buah kelompok dan `nilai` berisi *random normal-distributed value*.

## Tujuan *Data Manipulation* {.center}

> Kita akan membuat skrip **R** yang bertujuan untuk menghitung *mean* dan standar deviasi dari masing-masing grup pada data tersebut.

Kita akan gunakan tiga *libraries* dengan prinsip *tidy* dan akan kita bandingkan:

1.  *Runtime*.
2.  Konsumsi *memory*.

Keduanya akan kita ukur menggunakan `library(bench)`.

# *FUNCTION* MASING-MASING *LIBRARIES*

## `library(dplyr)`

```{r}
# definisikan proses dengan dplyr
proses_dplyr <- function(data) {
  data %>%
    group_by(grup) %>%
    summarize(
      rata_rata = mean(nilai),
      std_dev   = sd(nilai)
    ) %>% 
    ungroup()
}

proses_dplyr(df_input)
```

## `library(dtplyr)`

```{r}
# definisikan proses dengan dtplyr
proses_dtplyr <- function(data) {
  data |>
    dtplyr::lazy_dt() |> 
    group_by(grup) |>
    summarise(
      rata_rata = mean(nilai),
      std_dev   = sd(nilai)
    ) %>% 
    ungroup() 
}

proses_dtplyr(df_input)
```

## `library(tidypolars)`

```{r}
# definisikan proses dengan tidypolars
proses_tidypolars <- function(data) {
  data |>
    as_polars_df() |> 
    group_by(grup) |>
    summarise(
      rata_rata = mean(nilai),
      std_dev   = sd(nilai)
    ) %>% 
    ungroup() 
}

proses_tidypolars(df_input)
```

# ADU *RUNTIME* DAN KONSUMSI *MEMORY*

## Konsumsi *Memory*

Kita akan ulangi sebanyak `10` kali percobaan:

```{r}
# Pengukuran waktu dan memori
bench_result <- bench::mark(
  proses_dplyr(df_input),
  proses_dtplyr(df_input),
  proses_tidypolars(df_input),
  iterations = 10,
  check = F,
  memory = T
)

bench_result %>% 
  select(expression,
         mem_alloc,
         total_time,
         median) %>% 
  knitr::kable()
```

# KESIMPULAN {.center}

Apa yang bisa kita pelajari hari ini?

# TERIMA KASIH {.unnumbered .unlisted}
